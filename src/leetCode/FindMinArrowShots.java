package leetCode;

import java.util.Arrays;

/**
 * 在二维空间中有许多球形的气球。对于每个气球，提供的输入是水平方向上，气球直径的开始和结束坐标。
 * 由于它是水平的，所以纵坐标并不重要，因此只要知道开始和结束的横坐标就足够了。开始坐标总是小于结束坐标。
 * 一支弓箭可以沿着 x 轴从不同点完全垂直地射出。
 * 在坐标 x 处射出一支箭，若有一个气球的直径的开始和结束坐标为 xstart，xend， 
 * 且满足  xstart ≤ x ≤ xend，则该气球会被引爆。可以射出的弓箭的数量没有限制。 弓箭一旦被射出之后，可以无限地前进。
 * 我们想找到使得所有气球全部被引爆，所需的弓箭的最小数量。
 * 给你一个数组 points ，其中 points [i] = [xstart,xend] ，返回引爆所有气球所必须射出的最小弓箭数。
 * @author 14257
 *
 */
public class FindMinArrowShots {
	public static void main(String[] args) {
		int[][] points = {{9,12},{1,10},{4,11},{8,12},{3,9},{6,9},{6,7}};
		Arrays.sort(points,(o1,o2)->{
			if (o1[0]>o2[0]) {
				return 1;
			}else if(o1[0]<o2[0]){
				return -1;
			}else {
				if (o1[1]>=o2[1]) {
					return 1;
				}else {
					return -1;
				}
			}
					});
		int count=1;
		int max = points[0][1];
		for (int[] is : points) {
			if (is[0]>max) {
				count++;
				max=is[1];
			}else {
				if (is[1]<max) {
					max=is[1];
				}
			}
		}
		
		System.out.println(count);
		
//		
//		Arrays.sort(points, new Comparator<int[]>() {
//			public int compare(int[] point1, int[] point2) {
//				if (point1[1] > point2[1]) {
//					return 1;
//				} else if (point1[1] < point2[1]) {
//					return -1;
//				} else {
//					return 0;
//				}
//			}
//		});
//		int pos = points[0][1];
//		int ans = 1;
//		for (int[] balloon : points) {
//			if (balloon[0] > pos) {
//				pos = balloon[1];
//				++ans;
//			}
//		}
//		System.out.println(ans);

	}

}
